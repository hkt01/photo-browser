{"version":3,"sources":["components/Pagination/Pagination.jsx","components/Thumbnail/Thumbnail.jsx","views/Images.jsx","components/Spinner/Spinner.jsx","containers/ImagesContainer.jsx","views/SingleImage.jsx","containers/ImageContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["LEFT_PAGE","RIGHT_PAGE","range","from","to","step","i","push","Pagination","props","gotoPage","page","onPageChanged","f","currentPage","Math","max","min","totalPages","setState","handleClick","evt","preventDefault","handleMoveLeft","state","pageNeighbours","handleMoveRight","fetchPageNumbers","totalNumbers","startPage","endPage","pages","hasLeftSpill","hasRightSpill","spillOffset","length","extraPages","totalRecords","pageLimit","ceil","this","aria-label","className","map","index","key","href","onClick","aria-hidden","Component","Thumbnail","image","Col","pathname","id","src","thumbnailUrl","alt","title","Images","images","Row","Spinner","useState","show","setShow","enableSpinner","useEffect","timer","setTimeout","clearTimeout","ImagesContainer","fetchImages","axios","get","then","res","data","totalCount","parseInt","headers","loading","catch","error","console","log","response","statusText","setPagination","Container","fluid","Breadcrumb","Item","active","Alert","variant","Image","url","Form","Group","controlId","Label","Control","type","readOnly","defaultValue","albumId","ImageContainer","fetchImage","location","match","params","SingleImage","App","path","component","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.45b0a431.chunk.js","sourcesContent":["/* Modified from https://github.com/gladchinda/build-react-pagination-demo */\r\nimport React, { Component, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport \"./pagination.css\";\r\n\r\nconst LEFT_PAGE = 'LEFT';\r\nconst RIGHT_PAGE = 'RIGHT';\r\n\r\n/**\r\n * Helper method for creating a range of numbers\r\n * range(1, 5) => [1, 2, 3, 4, 5]\r\n */\r\nconst range = (from, to, step = 1) => {\r\n  let i = from;\r\n  const range = [];\r\n\r\n  while (i <= to) {\r\n    range.push(i);\r\n    i += step;\r\n  }\r\n\r\n  return range;\r\n}\r\n\r\nclass Pagination extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    const { totalRecords = null, pageLimit = 30, pageNeighbours = 0 } = props;\r\n\r\n    this.pageLimit = typeof pageLimit === 'number' ? pageLimit : 30;\r\n    this.totalRecords = typeof totalRecords === 'number' ? totalRecords : 0;\r\n\r\n    // pageNeighbours can be: 0, 1 or 2\r\n    this.pageNeighbours = typeof pageNeighbours === 'number'\r\n      ? Math.max(0, Math.min(pageNeighbours, 2))\r\n      : 0;\r\n\r\n    this.totalPages = Math.ceil(this.totalRecords / this.pageLimit);\r\n\r\n    this.state = { currentPage: 1 };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.gotoPage(1);\r\n  }\r\n\r\n  gotoPage = page => {\r\n    const { onPageChanged = f => f } = this.props;\r\n\r\n    const currentPage = Math.max(0, Math.min(page, this.totalPages));\r\n\r\n    this.setState({ currentPage }, () => onPageChanged(currentPage));\r\n  }\r\n\r\n  handleClick = page => evt => {\r\n    evt.preventDefault();\r\n    this.gotoPage(page);\r\n  }\r\n\r\n  handleMoveLeft = evt => {\r\n    evt.preventDefault();\r\n    this.gotoPage(this.state.currentPage - (this.pageNeighbours * 2) - 1);\r\n  }\r\n\r\n  handleMoveRight = evt => {\r\n    evt.preventDefault();\r\n    this.gotoPage(this.state.currentPage + (this.pageNeighbours * 2) + 1);\r\n  }\r\n\r\n  /**\r\n   * Let's say we have 10 pages and we set pageNeighbours to 2\r\n   * Given that the current page is 6\r\n   * The pagination control will look like the following:\r\n   *\r\n   * (1) < {4 5} [6] {7 8} > (10)\r\n   *\r\n   * (x) => terminal pages: first and last page(always visible)\r\n   * [x] => represents current page\r\n   * {...x} => represents page neighbours\r\n   */\r\n  fetchPageNumbers = () => {\r\n\r\n    const totalPages = this.totalPages;\r\n    const currentPage = this.state.currentPage;\r\n    const pageNeighbours = this.pageNeighbours;\r\n\r\n    /**\r\n     * totalNumbers: the total page numbers to show on the control\r\n     * totalBlocks: totalNumbers + 2 to cover for the left(<) and right(>) controls\r\n     */\r\n    const totalNumbers = (this.pageNeighbours * 2) + 3;\r\n    const totalBlocks = totalNumbers + 2;\r\n\r\n    if (totalPages > totalBlocks) {\r\n\r\n      const startPage = Math.max(2, currentPage - pageNeighbours);\r\n      const endPage = Math.min(totalPages - 1, currentPage + pageNeighbours);\r\n\r\n      let pages = range(startPage, endPage);\r\n\r\n      /**\r\n       * hasLeftSpill: has hidden pages to the left\r\n       * hasRightSpill: has hidden pages to the right\r\n       * spillOffset: number of hidden pages either to the left or to the right\r\n       */\r\n      const hasLeftSpill = startPage > 2;\r\n      const hasRightSpill = (totalPages - endPage) > 1;\r\n      const spillOffset = totalNumbers - (pages.length + 1);\r\n\r\n      switch (true) {\r\n        // handle: (1) < {5 6} [7] {8 9} (10)\r\n        case (hasLeftSpill && !hasRightSpill): {\r\n          const extraPages = range(startPage - spillOffset, startPage - 1);\r\n          pages = [LEFT_PAGE, ...extraPages, ...pages];\r\n          break;\r\n        }\r\n\r\n        // handle: (1) {2 3} [4] {5 6} > (10)\r\n        case (!hasLeftSpill && hasRightSpill): {\r\n          const extraPages = range(endPage + 1, endPage + spillOffset);\r\n          pages = [...pages, ...extraPages, RIGHT_PAGE];\r\n          break;\r\n        }\r\n\r\n        // handle: (1) < {4 5} [6] {7 8} > (10)\r\n        case (hasLeftSpill && hasRightSpill):\r\n        default: {\r\n          pages = [LEFT_PAGE, ...pages, RIGHT_PAGE];\r\n          break;\r\n        }\r\n      }\r\n\r\n      return [1, ...pages, totalPages];\r\n\r\n    }\r\n\r\n    return range(1, totalPages);\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    if (!this.totalRecords || this.totalPages === 1) return null;\r\n\r\n    const { currentPage } = this.state;\r\n    const pages = this.fetchPageNumbers();\r\n\r\n    return (\r\n      <Fragment>\r\n        <nav aria-label=\"Images Pagination\">\r\n          <ul className=\"pagination\">\r\n            { pages.map((page, index) => {\r\n\r\n              if (page === LEFT_PAGE) return (\r\n                <li key={index} className=\"page-item\">\r\n                  <a className=\"page-link\" href=\"!#\" aria-label=\"Previous\" onClick={this.handleMoveLeft}>\r\n                    <span aria-hidden=\"true\">&laquo;</span>\r\n                    <span className=\"sr-only\">Previous</span>\r\n                  </a>\r\n                </li>\r\n              );\r\n\r\n              if (page === RIGHT_PAGE) return (\r\n                <li key={index} className=\"page-item\">\r\n                  <a className=\"page-link\" href=\"!#\" aria-label=\"Next\" onClick={this.handleMoveRight}>\r\n                    <span aria-hidden=\"true\">&raquo;</span>\r\n                    <span className=\"sr-only\">Next</span>\r\n                  </a>\r\n                </li>\r\n              );\r\n\r\n              return (\r\n                <li key={index} className={`page-item${ currentPage === page ? ' active' : ''}`}>\r\n                  <a className=\"page-link\" href=\"!#\" onClick={ this.handleClick(page) }>{ page }</a>\r\n                </li>\r\n              );\r\n\r\n            }) }\r\n\r\n          </ul>\r\n        </nav>\r\n      </Fragment>\r\n    );\r\n\r\n  }\r\n}\r\n\r\nPagination.propTypes = {\r\n  totalRecords: PropTypes.number.isRequired,\r\n  pageLimit: PropTypes.number,\r\n  pageNeighbours: PropTypes.number,\r\n  onPageChanged: PropTypes.func\r\n};\r\n\r\nexport default Pagination;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nfunction Thumbnail(props) {\r\n    const {image} = props;\r\n    return (\r\n      <Col className=\"thumbnailImage\">\r\n        <Link to={{\r\n          pathname: '/photo-browser/image/'+image.id,\r\n          state: {\r\n            image: image\r\n          }\r\n        }}>\r\n          <img src={image.thumbnailUrl} alt={image.title} />\r\n        </Link>\r\n      </Col>\r\n    );\r\n}\r\n\r\nThumbnail.propTypes = {\r\n  image: PropTypes.shape({\r\n    id: PropTypes.number,\r\n    albumId: PropTypes.number,\r\n    title: PropTypes.string,\r\n    thumbnailUrl: PropTypes.string,\r\n    url: PropTypes.string,\r\n  }).isRequired\r\n};\r\n\r\nexport default Thumbnail;\r\n","import React, { Component } from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nimport Thumbnail from '../components/Thumbnail/Thumbnail';\r\n\r\nclass Images extends Component {\r\n  render() {\r\n    const { images } = this.props;\r\n    \r\n    return (\r\n      <Row>\r\n        {images && images.map((image, index) => (\r\n          <Thumbnail image={image} key={image.id}/>\r\n        ))}\r\n      </Row>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Images;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport \"./spinner.css\";\r\n\r\n/**\r\n * Spinner component to display data being loaded (with hooks).\r\n */\r\nfunction Spinner() {\r\n  // Set state\r\n  const [show, setShow] = useState(false);\r\n\r\n  // Set timeout on mounting\r\n  useEffect(() => {\r\n    const timer = setTimeout(enableSpinner, 250);\r\n\r\n    // Cleanup after unmounting\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  });\r\n\r\n  function enableSpinner() {\r\n    setShow(true);\r\n  }\r\n\r\n  if (!show) {\r\n    return null;\r\n  }\r\n  return <div className=\"loader\">Loading...</div>;\r\n}\r\n\r\nexport default Spinner;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Breadcrumb from 'react-bootstrap/Breadcrumb';\r\n\r\nimport Pagination from '../components/Pagination/Pagination';\r\nimport Images from '../views/Images';\r\nimport Spinner from '../components/Spinner/Spinner';\r\n\r\n/**\r\n * Container component for loading images per page.\r\n * TODO: Calculate pageLimit based on screen width\r\n */\r\nclass ImagesContainer extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      images: [],\r\n      totalCount: 0,\r\n      currentPage: 1,\r\n      pageLimit: 24,\r\n      pageNeighbours: 2,\r\n      loading: false,\r\n      error:null\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({loading:true}, function() {\r\n      this.fetchImages();\r\n    });\r\n\r\n  }\r\n\r\n  fetchImages = () => {\r\n    axios.get(`https://jsonplaceholder.typicode.com/photos?_page=${this.state.currentPage}&_limit=${this.state.pageLimit}`)\r\n      .then(res => {\r\n        const images = res.data;\r\n        const totalCount = parseInt(res.headers['x-total-count']);\r\n        this.setState({ images, totalCount, loading: false });\r\n      })\r\n      .catch(error => {\r\n          console.log(error.response)\r\n          this.setState({ loading: false, error: error.response.statusText });\r\n      });\r\n  }\r\n\r\n  setPagination = (page) => {\r\n    this.setState({ currentPage: page }, this.fetchImages);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container fluid={false}>\r\n        <Breadcrumb>\r\n          <Breadcrumb.Item active>Images</Breadcrumb.Item>\r\n        </Breadcrumb>\r\n\r\n        { this.state.totalCount &&\r\n          <Pagination\r\n            totalRecords={this.state.totalCount}\r\n            pageLimit={this.state.pageLimit}\r\n            pageNeighbours={this.state.pageNeighbours}\r\n            onPageChanged={this.setPagination}\r\n          />\r\n        }\r\n\r\n        { this.state.loading ?\r\n          (<Spinner />) :\r\n          (!this.state.error ?\r\n            (<Images images={this.state.images} />) :\r\n            (<Alert variant=\"danger\">{this.state.error}</Alert>)\r\n          )\r\n        }\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImagesContainer;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nfunction Image(props) {\r\n  const {image} = props;\r\n  return (\r\n    <Row>\r\n      <Col>\r\n        <img src={image.url} alt={image.title} />\r\n      </Col>\r\n      <Col>\r\n        <Form>\r\n          <Form.Group controlId=\"albumId\">\r\n            <Form.Label>Album ID:</Form.Label>\r\n            <Form.Control type=\"text\" readOnly defaultValue={image.albumId} />\r\n          </Form.Group>\r\n          <Form.Group controlId=\"imageId\">\r\n            <Form.Label>Image ID:</Form.Label>\r\n            <Form.Control type=\"text\" readOnly defaultValue={image.id} />\r\n          </Form.Group>\r\n          <Form.Group controlId=\"imageTitle\">\r\n            <Form.Label>Title:</Form.Label>\r\n            <Form.Control type=\"text\" readOnly defaultValue={image.title} />\r\n          </Form.Group>\r\n          <Form.Group controlId=\"imageUrl\">\r\n            <Form.Label>URL:</Form.Label>\r\n            <Form.Control type=\"text\" readOnly defaultValue={image.url} />\r\n          </Form.Group>\r\n          <Form.Group controlId=\"imageThumbnailUrl\">\r\n            <Form.Label>Thumbnail URL:</Form.Label>\r\n            <Form.Control type=\"text\" readOnly defaultValue={image.thumbnailUrl} />\r\n          </Form.Group>\r\n        </Form>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n\r\nImage.propTypes = {\r\n  image: PropTypes.shape({\r\n    id: PropTypes.number,\r\n    albumId: PropTypes.number,\r\n    title: PropTypes.string,\r\n    thumbnailUrl: PropTypes.string,\r\n    url: PropTypes.string,\r\n  }).isRequired\r\n};\r\n\r\nexport default Image;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Breadcrumb from 'react-bootstrap/Breadcrumb';\r\n\r\nimport SingleImage from '../views/SingleImage';\r\nimport Spinner from '../components/Spinner/Spinner';\r\n\r\n/**\r\n * Container component for loading one image.\r\n */\r\nclass ImageContainer extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      image: {},\r\n      loading: false,\r\n      error: null\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Check if we already have image info coming through props\r\n    const image = (this.props.location.state)?this.props.location.state.image:null;\r\n    if(image) {\r\n      this.setState({image});\r\n    } else { // Get image id from url params\r\n      const { id } = this.props.match.params;\r\n      this.setState({loading:true}, function() {\r\n        this.fetchImage(id);\r\n      });\r\n    }\r\n  }\r\n\r\n  fetchImage = (id) => {\r\n    axios.get(`https://jsonplaceholder.typicode.com/photos/${id}`)\r\n      .then(res => {\r\n        const image = res.data;\r\n        this.setState({ image, loading: false });\r\n      })\r\n      .catch(error => {\r\n          console.log(error.response)\r\n          this.setState({ loading: false, error: error.response.statusText });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container >\r\n        <Breadcrumb>\r\n          <Breadcrumb.Item href=\"/photo-browser\">Images</Breadcrumb.Item>\r\n          <Breadcrumb.Item active>Single image</Breadcrumb.Item>\r\n        </Breadcrumb>\r\n\r\n        { this.state.loading  ?\r\n          (<Spinner />) :\r\n          ( !this.state.error ?\r\n            (<SingleImage image={this.state.image} />) :\r\n            (<Alert variant=\"danger\">{this.state.error}</Alert>)\r\n          )\r\n        }\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImageContainer;\r\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport ImagesContainer from './containers/ImagesContainer';\nimport ImageContainer from './containers/ImageContainer';\n\nfunction App() {\n  return (\n    <Router>\n      <header>\n        <h1>Photo Browser</h1>\n      </header>\n      <Switch>\n        <Route path=\"/photo-browser/image/:id\" component={ImageContainer} />\n        <Route path=\"/photo-browser\">\n          <ImagesContainer />\n        </Route>\n        <Redirect from=\"/\" to=\"/photo-browser\" />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}